~unit Demo type=exe;

~import Lp3::Log::LogSystem;
~import LP3_LOG_DEBUG;
~import Camera;
~import Ray::RayPolygon;
~import RayObject;
~import Renderer;
~import Screen;
~import Sphere;
~import World;


~block "cpp":=


#include<windows.h>
#include<iostream>
#include <cmath>
#include <time.h>

#pragma comment (lib, "user32.lib")
#pragma comment (lib, "Gdi32.lib")

using namespace std;

#define PI 3.14

class ConsoleRenderer : public Renderer
{
private:
    HDC dc;

public:

    ConsoleRenderer(HDC dc)
    : dc(dc)
    {}

    unsigned int startX;
    unsigned int startY;

    virtual void nPSet(const unsigned int x, const unsigned int y, Rgb & rgb)
    {
        COLORREF COLOR= RGB(rgb.R * 255.0, rgb.G * 255.0, rgb.B * 255.0);
        unsigned int _x = x * 2;
        unsigned int _y = y * 2;
        SetPixel(dc, _x + 25, _y + 40, COLOR);
        SetPixel(dc, _x + 25 + 1, _y + 40, COLOR);
        SetPixel(dc, _x + 25, _y + 40 + 1, COLOR);
        SetPixel(dc, _x + 25 + 1, _y + 40 + 1, COLOR);
    }

    virtual void PSet(const unsigned int x, const unsigned int y, Rgb & rgb)
    {
        COLORREF COLOR= RGB(rgb.R * 255.0, rgb.G * 255.0, rgb.B * 255.0);
        SetPixel(dc, x + startX, y + startY, COLOR);
    }
};



int main()
{
    const int start = clock();
    //cin.ignore();
    //Get a console handle
    HWND myconsole = GetConsoleWindow();
    //Get a handle to device context
    HDC mydc = GetDC(myconsole);

    int pixel =0;

    World world;

    srand( 256 );
    for (size_t i = 0; i < 10; i ++)
    {
        const double x = (rand() / (double)RAND_MAX) * 10.0 - 5.0;
        const double y = (rand() / (double)RAND_MAX) * 10.0 - 1.0;
        const double z = (rand() / (double)RAND_MAX) * 10.0 - 5.0;
        const double r = (rand() / (double)RAND_MAX) * 0.8 + 0.2;
        world.AddSphere(new Sphere(Vector3(x, y, z), r))->Reflectance = 0.3;
    }
    //world.AddSphere(new Sphere(Vector3(0, 0, 0), 1))->Reflectance = 0.3;

    int five = 5;




    Ray::RayPolygon * pGonPtr;
    int five1 = 5;

    pGonPtr = new Ray::RayPolygon(
        Vector3(0.0, 5.0, 0),
        Vector3(3.0, 2.0, 0),
        Vector3(-3.0, 2.0, 0)
    );
    RayObjectPtr pGon(pGonPtr);
    world.AddObject(pGon);

    world.AddSphere(new Sphere(Vector3(5, 1, 0), 2))->Reflectance = 0.3;

    RayObjectPtr bottom(new Sphere(Vector3(0, -100, 0), 98));
    bottom->Reflectance = 0.75;
    bottom->Shiny = 0.0;
    world.AddObject(bottom);

    // A MATTRESS OF SPHERES IN THE HEAVENS
    /*for (int o = 0; o < 10; o ++)
    {
        int l = o - 5;
        for (int j = 0; j < 10; j ++)
        {
            int k = j - 5;
            RayObjectPtr sphere(new Sphere(
                Vector3(100.0 * (double)k,
                        300,
                        100.0 * (double)l), 98));
            world.AddObject(sphere);
        }
    }*/
    //world.AddSphere(Sphere(Vector3(0, 300, 0), 98));
    //world.AddSphere(Sphere(Vector3(100, 300, 0), 98));
    //world.AddSphere(Sphere(Vector3(200, 300, 0), 98));

    //world.AddSphere(Sphere(Vector3(-5, 2, 5), 1);

    //world.AddSphere(Sphere(Vector3(3, -2, -3), 1);

    //world.AddLight(Rgb(1.0, 1.0, 0.0), Vector3(0, 100, 0), 1.0);

    // THIS IS THE ONE WE LIKE:
    world.AddLight(Rgb(0.7, 0.7, 1.0), Vector3(0, 100, 0), 1.0);

//    world.AddLight(Rgb(0.0, 1.0, 0.0), Vector3(-50, 100, 0), 1.0);

    //world.AddSphere(Sphere(Vector3(-50, 100, 0), 1.0));
 //   world.AddLight(Rgb(0.0, 0.0, 1.0), Vector3(-100, 100, 0), 1.0);


    Camera camera;
     // 427, 213);
    camera.aspectRatio = 1.0;
    camera.SetDirection(Vector3(0, 0, 1));
    camera.SetLocation(Vector3(10, 5, -20)); //-50)); //-20));

    camera.LookAt(Vector3(0, 0, 0));

    ConsoleRenderer renderer(mydc);
    renderer.startX = 25;
    renderer.startY = 40;
    camera.screen = Screen(800, 800); ////Screen(320, 320) ;
    camera.DrawScreen(world, renderer);
    /*
    renderer.startX = 25;
    renderer.startY = 380;
    camera.SetLocation(Vector3(15, 5, -15));
    camera.LookAt(Vector3(0, 0, 0));
    camera.DrawScreen(world, renderer);

    renderer.startX = 350;
    renderer.startY = 40;
    camera.SetLocation(Vector3(10, 5, 20));
    camera.LookAt(Vector3(0, 0, 0));
    camera.DrawScreen(world, renderer);*/

    /*for(int x = 0; x < 854; x++)
    {
        for(int y = 0; y < 480; y++)
        {
            COLORREF COLOR= RGB((x / 854.0) * 255, (y / 480.0) * 255,
                ((x -y) / 250) * 255);
            SetPixel(mydc,x,y,COLOR);
        }
    }*/

    ReleaseDC(myconsole, mydc);
    //cin.ignore();
    const int end = clock();
    std::cout << "Elapsed time : "
              << ((end - start)/1000.0) << "s" << std::endl;
    return 0;
}
