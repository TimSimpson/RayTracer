~import std::ostream;
~import sqrt;


class Vector3
/* Typical Vector class used for 3D location and directions. */
{
    private bool computeLength;
    private double length;
    private double x;
    private double y;
    private double z;

    public Vector3(const double X, const double Y, const double Z)
    :   computeLength(true),
        length(0),
        x(X),
        y(Y),
        z(Z)
    {
    }

    public Vector3 & operator=(const Vector3 & other)
    {
        this->x = other.x;
        this->y = other.y;
        this->z = other.z;
        return *this;
    }

    public bool operator == (const Vector3 & other) const
    {
        return this->x == other.x && this->y == other.y && this->z == other.z;
    }

    public bool operator != (const Vector3 & other) const
    {
        return !operator==(other);
    }

    public Vector3 operator +(const Vector3 & b) const
    {
        return Vector3(this->X() + b.X(), this->Y() + b.Y(), this->Z() + b.Z());
    }

    public Vector3 operator - (const Vector3 & b) const
    {
        return Vector3(this->X() - b.X(), this->Y() - b.Y(), this->Z() - b.Z());
    }

    public Vector3 operator * (const double scalar) const
    {
        return Vector3(this->X() * scalar, this->Y()  * scalar, this->Z()  * scalar);
    }
    public ~global(::) ~friend ostream & operator << (ostream & output,
                                                      const Vector3 & v)
    {
        output << "(" << v.X() << ", " << v.Y() << ", " << v.Z() << ")";
        return output;
    }

    public ~global void ASSERT_NORMALIZED(const Vector3 & v)
    {
        Vector3 vn = Normalize(v);
        if (vn != v)
        {
            std::cout << "NO! Vector not normalized!";
            throw std::exception();
        }
    }

    public double ComputeLength() const
    {
        if (!computeLength)
        {
            return length;
        }
        double length = sqrt(x * x + y * y +  z * z);
        return length;
    }

    public ~global Vector3 CrossProduct(const Vector3 & a, const Vector3 & b)
    {
        // Area of the parallelogram *sic* created by two vectors.
        const auto x = (a.Y() * b.Z()) - (a.Z() * b.Y());
        const auto y = (a.Z() * b.X()) - (a.X() * b.Z());
        const auto z = (a.X() * b.Y()) - (a.Y() * b.X());
        return Vector3(x, y, z);
    }

    public ~global double DotProduct(const Vector3 & a, const Vector3 & b)
    {
        return (a.X() * b.X()) + (a.Y() * b.Y()) + (a.Z() * b.Z());
    }

    public double Length()
    {
        if (computeLength)
        {
            length = sqrt(x * x + y * y +  z * z);
            computeLength = false;
        }
        return length;
    }

    public ~global Vector3 Normalize(const Vector3 & v)
    {
        const double vLength = v.ComputeLength();
        return Vector3(v.X() / vLength, v.Y() / vLength,
                      v.Z() / vLength);
    }


    /** Takes the normal vector and the incident and returns reflected vector.
     */
    public ~global Vector3 Reflect(const Vector3 & normal,
                                   const Vector3 & incident)
    {
        const Vector3 nIncident = Normalize(incident);// * -1.0;
        return nIncident - (normal * (2*DotProduct(nIncident, normal)));
        //return nIncident - ((normal * 2.0) * DotProduct(nIncident, normal));
    }

    public inline double X() const
    {
        return x;
    }

    public inline void X(double x)
    {
        computeLength = true;
        this->x = x;
    }

    public inline double Y() const
    {
        return y;
    }

    public inline void Y(double y)
    {
        computeLength = true;
        this->y = y;
    }

    public inline double Z() const
    {
        return z;
    }

    public inline void Z(double Z)
    {
        computeLength = true;
        this->z = z;
    }
};
